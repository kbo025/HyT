#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');

const debug = require('debug')('prerender:server');
const http = require('http');

const app = require('../app');
const config = require('../config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.service.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    throw new Error(bind + ' requires elevated privileges');
  case 'EADDRINUSE':
    throw new Error(bind + ' is already in use');
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  debug('Listening on ' + bind);

  const cmd = path.join(
    __dirname,
    '..',
    'node_modules',
    '.bin',
    'prerender'
  );

  const prerender = spawn(cmd, [], {
    cwd: path.join(__dirname, '..'),
    env: Object.assign({}, process.env, {
      PORT: config.prerender.port,
    }),
  });

  const { pid } = prerender;
  const { pidFile } = config.prerender;

  // eslint-disable-next-line no-sync
  fs.writeFileSync(pidFile, pid.toString(), { encoding: 'utf8' });

  prerender.on('exit', function() {
    // eslint-disable-next-line no-process-exit
    process.exit();
  });
}
