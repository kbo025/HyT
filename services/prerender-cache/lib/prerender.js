const path = require('path');
const fs = require('fs');

const pkg = require('../package.json');

const debug = require('debug')(pkg.name + ':lib:prerender');
const slugify = require('slugify');
const mkdirp = require('mkdirp');
const request = require('request').defaults({
  gzip: false,
});
const { minify } = require('html-minifier');

const config = require('../config');

const { host, port } = config.prerender;
const PRERENDER_URL = `http://${host}:${port}/`;

const MAX_RETRIES = 25;
const FAILED_HTML = '<html><head></head><body></body></html>';

let SNAPSHOT_PROMISES = {};

function getFile(url) {
  let slug = slugify(url);
  slug = slug.replace(/[^a-z0-9]/g, '-');
  slug = slug.replace(/-{2,}/g, '-');

  const filename = `${slug}.html`;
  const file = path.join(config.snapshots.path, filename);

  return file;
}

function createSnapshot(targetUrl, counter, callback) {
  if (typeof counter === 'function') {
    callback = counter;
    counter = 0;
  }
  const file = getFile(targetUrl);

  const url = PRERENDER_URL + encodeURIComponent(targetUrl);

  let promise = SNAPSHOT_PROMISES[url];

  if (!promise || counter > 0) {
    debug('creating snapshot for %s', targetUrl);

    promise = new Promise(function(resolve, reject) {
      return request.get(url, function(err, response, body) {
        if (err) {
          return reject(err);
        }

        if (body === FAILED_HTML) {
          debug('rendering failed');

          if (counter > MAX_RETRIES) {
            const err = new Error('max retries reached');

            return reject(err);
          }

          return createSnapshot(targetUrl, counter + 1, function(err, result) {
            if (err) {
              return reject(err);
            }

            return resolve(result);
          });
        }

        if (response.statusCode >= 400 && response.statusCode <= 599) {
          err = new Error(
            'prerender service responded with status '
            + response.statusCode
          );

          return reject(err);
        }

        return mkdirp(config.snapshots.path, function(err) {
          if (err) {
            return reject(err);
          }

          const options = {
            encoding: 'utf8',
          };

          debug('minifying response');
          const minifiedBody = minify(body, {
            collapseBooleanAttributes: true,
            collapseWhitespace: true,
            decodeEntities: true,
            includeAutoGeneratedTags: false,
            minifyCSS: true,
            minifyJS: true,
            quoteCharacter: '"',
            removeComments: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            sortAttributes: true,
            sortClassName: true,
          });

          debug('writing file to disk (%s)', file);

          return fs.writeFile(file, minifiedBody, options, function(err) {
            if (err) {
              return reject(err);
            }

            const result = {
              file,
              content: body,
            };

            return resolve(result);
          });
        });
      });
    });

    if (counter === 0) {
      SNAPSHOT_PROMISES[url] = promise;
    }
  }

  return promise.then(function(result) {
    return callback(null, result);
  }).catch(function(err) {
    return callback(err);
  });
}

function getSnapshot(url, forceReload, callback) {
  if (typeof forceReload === 'function') {
    callback = forceReload;
    forceReload = false;
  }

  const file = getFile(url);

  return fs.stat(file, function(err) {
    const ok = !err;
    if (ok && !forceReload) {
      return callback(null, file);
    }

    const targetUrl = url;
    const finalUrl = PRERENDER_URL + encodeURIComponent(targetUrl);
    SNAPSHOT_PROMISES[finalUrl] = null;

    return createSnapshot(url, function(err, result) {
      if (err) {
        return callback(err);
      }

      const { file } = result;

      return callback(null, file);
    });
  });
}

function clear() {
  SNAPSHOT_PROMISES = {};
}

exports.clear = clear;
exports.createSnapshot = createSnapshot;
exports.getSnapshot = getSnapshot;
